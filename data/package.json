{
  "code": 0,
  "data": {
    "records": [
      {
        "id": "1693142380552757250",
        "title": "Java SE 进阶 day -02 反射，属性，内省",
        "description": null,
        "content": "# 反射\n#### 为什么使用反射\n1. 动态性和灵活性：反射允许您在编写代码时不需要提前知道类的详细信息，而是在运行时动态获取。这使您能够根据需要动态创建对象、调用方法和访问字段，从而使您的代码更加灵活。\n2. 通用性和泛化：反射使您能够编写通用的代码，可以处理多个不同类型的类和对象。这在编写通用库、插件系统以及一些工具和框架时非常有用。\n3. 框架和库：许多Java框架和库，如Spring框架、Hibernate ORM、JUnit测试框架等，都使用了反射来实现依赖注入、动态代理、对象关系映射等功能。学习反射有助于更好地理解和使用这些工具。\n4. 插件和扩展：反射使得开发插件和扩展系统变得更加容易。您可以动态地加载和卸载类，从而实现模块化和可扩展的应用程序架构。\n5. 代码生成：反射允许您在运行时生成代码，这对于某些情况下需要动态生成类或方法的情况非常有用，例如生成模板代码或代理类。\n\n\n### 反射是什么\n反射是Java编程语言提供的一种机制，允许程序在运行时检查和操作类、接口、字段、方法和构造函数等。通过反射，您可以在编写代码时不需要提前知道类的详细信息，而是在运行时动态获取这些信息。这对于编写通用工具、插件系统、动态加载类以及生成代码等情况非常有用。\n###### OCP模式 开闭原则 设计模式和框架底层都会使用（面向对象）\n\n##### 常见方法及含义\n\n1. 获取Class对象：在反射中，首先需要获取要操作的类的Class对象。可以使用以下几种方法之一：\n\n```java\nCopy code\nClass<?> clazz1 = MyClass.class; // 通过类名获取\nClass<?> clazz2 = obj.getClass(); // 通过实例获取\nClass<?> clazz3 = Class.forName(\"com.example.MyClass\"); // 通过类的全限定名获取\n```\n2. 获取类信息：一旦有了Class对象，就可以获取类的详细信息，包括字段、方法、构造函数等。\n\n```java\nCopy code\nField[] fields = clazz.getDeclaredFields(); // 获取类的所有字段\nMethod[] methods = clazz.getDeclaredMethods(); // 获取类的所有方法\nConstructor<?>[] constructors = clazz.getDeclaredConstructors(); // 获取类的所有构造函数\n```\n3. 创建对象：反射允许您在运行时创建类的实例。\n```java\nCopy code\nConstructor<?> constructor = clazz.getDeclaredConstructor(parameterTypes);\nObject instance = constructor.newInstance(arguments);\n```\n4. 调用方法：您可以使用反射来调用类的方法。\n```java\nCopy code\nMethod method = clazz.getDeclaredMethod(\"methodName\", parameterTypes);\nObject result = method.invoke(instance, arguments);\n```\n5. 访问和修改字段：反射还允许您访问和修改类的字段。\n```java\nCopy code\nField field = clazz.getDeclaredField(\"fieldName\");\nfield.setAccessible(true); // 如果字段是私有的，需要设置访问权限\nObject fieldValue = field.get(instance); // 获取字段的值\nfield.set(instance, newValue); // 设置字段的值\n````\n性能和安全性考虑：尽管反射在某些情况下非常强大，但它也可能影响性能，因为许多反射操作都需要更多的处理时间。此外，反射也可能降低代码的可读性和维护性，并且由于其可以访问私有成员，可能引发安全隐患。\n\n反射在许多框架、库和工具中都得到广泛应用，例如依赖注入、ORM（对象关系映射）、动态代理等。然而，出于性能和代码可读性的考虑，最好在合适的情况下使用反射，避免过度使用。\n\n\n\n# 属性\n**属性和字段的概念：**\n\n**字段（Field）**：字段是类中声明的变量，用于存储对象的数据。字段可以是各种基本数据类型（如int、double等）或引用类型（如对象、数组等）。字段通常被声明为类的成员变量，并具有访问修饰符（public、private等）来指定其可见性。\n\n**属性（Property）**：属性是字段的高级概念，它不仅涉及到字段本身，还包括访问和修改字段值的方法。通过属性，可以在封装的前提下控制对字段的访问。属性通常由一个读取方法（getter）和一个写入方法（setter）组成。\n\n通过SetXxx/GetXxx,Xxx就是属性\n属性不是字段，有字段不一定有属性，有属性不一定有字段。\n\n参考代码:\n\n```java\npublic class Person {\n    private String name; // 字段\n\n    public String getName() { // 读取属性值的方法\n        return name;\n    }\n\n    public void setName(String name) { // 写入属性值的方法\n        this.name = name;\n    }\n}\n\n```\n\n\n\n用途和优势：\n\n1. **封装和访问控制**：通过将字段声明为私有，然后使用公共的读取和写入方法，可以实现封装，从而控制对对象内部数据的访问。这有助于维护对象的一致性和完整性。\n\n2. **数据验证和处理**：属性的写入方法（setter）可以在设置字段值之前进行数据验证和处理，确保字段值满足特定的规则和条件。\n\n3. **与面向对象编程一致性**：属性的概念与面向对象编程的思想相吻合，它强调了对象的状态和行为的封装。\n\n4. **适应性**：通过属性，可以轻松地更改底层的字段实现，而不影响使用属性的代码。这使得在不改变外部接口的情况下进行内部更改变得更加容易。\n\n# LOmbok\nLombok 是一个Java库，旨在通过在代码中添加注解来自动化生成样板代码，从而简化开发人员的工作。它可以帮助您减少冗长的getter、setter、构造函数等代码，使代码更加清晰、简洁，并提高开发效率。\n\n常用注解以及它们的作用：\n\n`@Getter 和 @Setter: 自动生成属性的 getter 和 setter 方法。`\n\n`@NoArgsConstructor: 自动生成无参构造函数。`\n\n`@AllArgsConstructor: 自动生成包含所有字段的构造函数。`\n\n`@Data: 自动添加 @Getter、@Setter、@ToString、@EqualsAndHashCode 和 @RequiredArgsConstructor 注解。`\n\n`@ToString: 自动生成 toString() 方法。`\n\n`@EqualsAndHashCode: 自动生成 equals() 和 hashCode() 方法。`\n\n`@Builder: 生成一个用于构建对象的构建器模式。`\n\n`@Slf4j: 自动生成日志记录变量。`\n\n`@NonNull: 标记字段，表示该字段不能为空，Lombok会自动生成空指针检查。`\n\n`@Value: 类似于 @Data，但将类标记为不可变的（所有字段为 final）。`\n\n\n\n# 内省\n内省（Introspection）是一种动态获取类的信息的机制，它通常通过反射来实现。内省允许您在运行时检查类的属性、方法和事件，以及操作这些元素。这个概念在Java编程中被广泛用于工具、框架和应用程序中，尤其是在需要处理类的元数据和属性的情况下。\n**用途和优势：**\n\n1. **属性访问**：内省允许您检查和访问类的属性。这对于自动生成用户界面（如图形界面）中的表单字段或控制面板非常有用。通过内省，您可以动态获取类的属性列表，并为每个属性生成对应的用户界面元素。\n\n2. **属性编辑**:通过内省，您可以在运行时获取属性的读取和写入方法，并在编辑器或IDE中创建一个通用的属性编辑界面。这种情况在开发工具或可视化编程环境中非常有用。\n\n3. **代码生成**：内省可以用于自动生成代码。例如，您可以检查类的属性并生成用于序列化或反序列化对象的代码。\n\n4. **动态代理**：在某些情况下，内省可以用于生成动态代理类。这些代理类可以在运行时拦截方法调用，并执行一些预定的操作。\n\n\n**示例**\n\n\n```java\nimport java.beans.BeanInfo;\nimport java.beans.Introspector;\nimport java.beans.PropertyDescriptor;\n\npublic class IntrospectionExample {\n    public static void main(String[] args) throws Exception {\n        BeanInfo beanInfo = Introspector.getBeanInfo(Person.class);\n        PropertyDescriptor[] propertyDescriptors = beanInfo.getPropertyDescriptors();\n\n        for (PropertyDescriptor propertyDescriptor : propertyDescriptors) {\n            System.out.println(\"Property: \" + propertyDescriptor.getName());\n            System.out.println(\"  getMethod: \" + propertyDescriptor.getReadMethod());\n            System.out.println(\"  setMethod: \" + propertyDescriptor.getWriteMethod());\n        }\n    }\n}\n\n```\n",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1673111457186713601/yVgHhOIF-github-mark.svg",
        "language": null,
        "viewNum": 9,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-20T06:06:15.000+00:00",
        "updateTime": "2023-08-21T05:44:33.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "Java 基础",
          "笔记"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1692497950648934401",
        "title": "java SE进阶_初识单元测试和配置文件",
        "description": " 单元测试和配置文件",
        "content": "# 单元测试\n单元测试是软件开发中的一种测试方法，用于验证程序中的最小功能模块（称为“单元”）是否按预期工作。这些测试可以通过自动化的方式运行，以确保代码在进行更大规模集成前是可靠的。\n\n## 黑盒测试(功能测试)\n黑盒测试是一种测试方法，测试人员仅通过输入和输出来评估程序的功能，而不考虑内部实现细节。测试重点是确保程序按照规格说明正常运行，不考虑内部逻辑。\n\n## 白盒测试\n白盒测试是一种测试方法，测试人员考虑程序的内部逻辑和结构，编写测试用例以验证每个分支、条件和路径是否都正确执行。这种测试可以揭示代码中的逻辑错误和漏洞。\n\n\n## 程序的生命周期\n\n一个程序的生命周期包括开发、测试、发布、维护等阶段。它是指程序从概念到废弃的整个过程，涵盖了需求分析、设计、编码、测试、部署和维护等不同的阶段。\n\n#. 可重用性：遵循 DRY 原则，减少软件中的重复代码。\n2. 可拓展性：当软件需要升级增加新的功能，能够在现有的系统架构上方便地创建新的模块，而不需 要改变软件现有的结构，也不会影响已经存在的模块。\n3. 可维护性：当用户需求发生变化时，只需要修改局部的模块中的少量代码即可\n\n如何让软件系统达到上述的特点，我们对模块的要求：\n1. 结构稳定性：在软件设计阶段，把一个模块划分为更小的模块\n2. 可拓展性：当软件必须增加新的功能时，可在现有模块的基础上创建出新的模块\n3. 可组合性：若干模块经过组合，形成大系统，模块的可组合性提高软件的可重用和可维护性\n4. 高内聚性：内聚，强调一个系模块内的功能联系，每个模块只完成特点的功能.\n5. 低耦合性：耦合，模块之间相互独立，修改某一个模块，不会影响 到其他的模块。\n\n\n## Junit jar包\nJUnit是Java中最常用的单元测试框架之一，它允许开发者编写自动化的测试用例来验证代码的正确性。\n\n### 什么是jar包,及使用\n\nJAR（Java Archive）是一种用于将Java类、资源和元数据打包成一个文件的格式。它可以用于将多个类文件、配置文件和其他资源打包到一个可执行的JAR文件中。要使用JAR包，只需将其包含在Java项目的类路径中。\n### junit 的使用及注意\n使用JUnit进行单元测试通常涉及以下步骤：\n\n    1.  导入JUnit库：将JUnit的JAR包包含到项目中。\n    2.  编写测试用例：创建测试类，使用@Test注解标记要测试的方法。\n    3.  编写断言：使用JUnit提供的断言方法来验证预期输出与实际输出是否匹配。\n    4.  运行测试：执行JUnit测试，查看测试结果。\n    \n  注意: 测试方法必须是\n          \n      ①公开的public \n      ②无返回,无参数 \n      ③命明规范testXxx(Xxx是要测试的方法名)\n      ④方法开头必须要有@Test注解\n\n# 配置文件\n配置文件是用于存储程序或系统配置信息的文件，它们可以帮助在不修改代码的情况下调整应用程序的行为。(多次修改数据,防止硬编码问题)\n\n#### 常见配置文件\n常见的配置文件类型包括：\n\n`Properties文件：一种键值对形式的配置文件，通常以.properties扩展名保存。`\n\n`XML配置文件：使用XML格式存储配置信息，具有更丰富的结构。`\n\n`YAML文件：一种人类可读的数据序列化格式，用于配置信息。`\n\n### properties\nProperties文件是一种简单的配置文件格式，例如:\n\n```properties\n#键值对存储\n#附近不要存在空格或其他字符\ndatabase.url=jdbc:mysql://localhost:3306/mydb\ndatabase.username=admin\ndatabase.password=secret\n```\n\n####  解析 properties 文件\n\n## 使用resources root 存放配置文件的好处\n**统一管理**：\n\n    将配置文件放在 \"resources\" 目录下可以集中管理项目的所有配置信息。\n    这样，你可以在一个地方查找、更新和维护所有的配置文件，而不需要在代码中指定硬编码的路径。\n\n**类路径访问**：\n\n    \"resources\" 目录下的文件会被编译到项目的类路径中，这意味着你可以通过类加载器轻松地访问这些文件。\n    这使得在代码中加载配置文件变得更加简单，不需要处理绝对路径或相对路径。\n\n**避免部署问题**：\n\n    在项目中使用相对路径或绝对路径来访问配置文件可能会在不同环境中导致问题，例如，文件路径可能会因为部署位置的不同而发生变化。\n    将配置文件放在 \"resources\" 目录下可以避免这些问题，因为类路径的位置在不同环境中是一致的。\n\n**包装到 JAR 或 WAR**：\n\n       如果你将项目打包为 JAR 文件或 WAR 文件，\"resources\" 目录下的内容会被包含在这些文件中。\n       这意味着你的配置文件会与应用程序一起分发，不需要单独拷贝或配置。\n\n**方便的类加载器**：\n\n    Java 的类加载器会自动搜索类路径下的资源文件。\n    这意味着你可以通过类加载器直接加载资源，而不需要关心文件路径的问题。`\n\n\n方式一:绝对路径\n\n```java\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class AbsolutePathPropertiesParser {\n    public static void main(String[] args) {\n        Properties properties = new Properties();\n        String filePath = \"C:\\\\myproject\\\\config.properties\"; // 使用绝对路径\n\n        try (InputStream input = new FileInputStream(filePath)) {\n            properties.load(input);\n\n            String url = properties.getProperty(\"database.url\");\n            String username = properties.getProperty(\"database.username\");\n            String password = properties.getProperty(\"database.password\");\n\n            System.out.println(\"Database URL: \" + url);\n            System.out.println(\"Username: \" + username);\n            System.out.println(\"Password: \" + password);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n方式二:使用类加载器解析文件(推荐使用)\n```java\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Properties;\n\npublic class PropertiesParser {\n    public static void main(String[] args) {\n        Properties properties = new Properties();\n        try (InputStream input = new FileInputStream(\"config.properties\")) {\n            properties.load(input);\n\n            String url = properties.getProperty(\"database.url\");\n            String username = properties.getProperty(\"database.username\");\n            String password = properties.getProperty(\"database.password\");\n\n            System.out.println(\"Database URL: \" + url);\n            System.out.println(\"Username: \" + username);\n            System.out.println(\"Password: \" + password);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n```\n\n\n### xml\nXML配置文件具有更灵活的结构，例如：\n\n```xml\n<configuration>\n    <database>\n        <url>jdbc:mysql://localhost:3306/mydb</url>\n        <username>admin</username>\n        <password>secret</password>\n    </database>\n</configuration>\n```\n\n#### 解析 XML 文件\n解析 XML 文件是将XML数据转换为程序能够理解的数据结构的过程。在Java中，常用的XML解析方式有两种：DOM（文档对象模型）和SAX（简单API for XML）。\n\n将xml中所有数据,读取到内存中,通过对象封装.\n\n##### DOM（文档对象模型）方式解析\n\n```java\n@Test\npublic void testGetStudentName() throws ParserConfigurationException, IOException, SAXException {\n    // 获取Document对象\n    DocumentBuilderFactory fac = DocumentBuilderFactory.newInstance();\n    DocumentBuilder builder = fac.newDocumentBuilder();\n    Document document = builder.parse(file);\n\n    // 打印整个文档的信息，用于验证是否成功解析\n    System.out.println(document);\n\n    // 获取根元素\n    Element studentsElement = document.getDocumentElement();\n\n    // 获取所有名为 \"student\" 的元素列表\n    NodeList students = studentsElement.getElementsByTagName(\"student\");\n\n    // 获取第二个 \"student\" 元素\n    Element item = (Element) students.item(1);\n\n    // 获取 \"student\" 元素内的名为 \"name\" 的元素列表\n    NodeList name = item.getElementsByTagName(\"name\");\n\n    // 获取 \"name\" 元素\n    Node nameElement = name.item(0);\n\n    // 获取 \"name\" 元素的文本内容，即学生的姓名\n    String textContent = nameElement.getTextContent();\n    System.out.println(textContent);\n}\n\n```\n\n**DOM解析思路**:\n导入所需的DOM相关类，如 org.w3c.dom.* 和 javax.xml.parsers.*。\n\n创建一个 DocumentBuilderFactory 实例，用于创建 DocumentBuilder。\n\n使用 DocumentBuilder 解析 XML 文件，获得 Document 对象。\n\n使用 Document 对象获取根元素，并规范化文档。\n\n使用 getElementsByTagName 获取指定标签的节点列表，然后遍历列表。\n\n对于每个节点，检查其类型是否为 ELEMENT_NODE。\n\n使用 Element 对象获取子元素的文本内容，构建你想要的数据结构。\n\n\n### XML 规范约束\n**DTD（文档类型定义）：**\nDTD是一种定义XML文档结构、元素和属性的方式。它使用简单的语法来描述XML的结构和限制。\n\n**XSD（XML模式定义）：**\nXSD是一种更强大和灵活的XML约束语言，它使用XML格式本身来定义文档的结构、元素、属性、数据类型等。XSD比DTD更具表现力和扩展性。",
        "category": "文章",
        "cover": "https://pic.code-nav.cn/post_cover/1673111457186713601/o9SpVmkV-logo.png",
        "language": null,
        "viewNum": 11,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-18T11:25:31.000+00:00",
        "updateTime": "2023-08-20T15:02:52.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章",
          "笔记",
          "Java",
          "Java 基础"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1690941975404060673",
        "title": "java学习之 IO_day01",
        "description": null,
        "content": "## File 类\n\n该类包含了**文件或者文件夹**的**创建、删除、重命名、判断是否存在等**方法。\n\n**注意** :只能获取和设置文件本身的信息（文件大小，是否可读），不能设置和获取文件里面的内容。\n\n常用方法:\n|       类型       |                  构造器                   |                             方法                             | 描述                                                         |\n| :--------------: | :---------------------------------------: | :----------------------------------------------------------: | ------------------------------------------------------------ |\n|     `File`      |    `File(String pathname)`                 |                                                              | 通过指定路径名字符串创建一个新的 `File` 对象。               |\n|                  |  `File(String parent, String child)`      |                                                              | 根据指定的父路径字符串和子路径字符串创建一个新的 `File` 对象。 |\n|                  |  `File(File parent, String child)`        |                                                              | 根据指定的父抽象路径和子路径字符串创建一个新的 `File` 对象。   |\n|                  |                                           |          `String getName()`                               | 获取文件或目录的名称。                                       |\n|                  |                                           |          `String getPath()`                               | 返回此抽象路径名的路径名字符串。                             |\n|                  |                                           |          `String getAbsolutePath()`                       | 返回此抽象路径名的绝对路径名字符串。                         |\n|                  |                                           |          `boolean exists()`                                | 测试此抽象路径名表示的文件或目录是否存在。                   |\n|                  |                                           |          `boolean isDirectory()`                           | 测试此抽象路径名表示的是否为目录。                           |\n|                  |                                           |          `boolean isFile()`                                | 测试此抽象路径名表示的是否为文件。                           |\n|                  |                                           |          `long length()`                                   | 返回由此抽象路径名表示的文件的长度。                         |\n|                  |                                           |          `long lastModified()`                             | 返回文件的最后修改时间。                                     |\n|                  |                                           |          `boolean canRead()`                               | 测试应用程序是否可以读取此抽象路径名表示的文件。             |\n|                  |                                           |          `boolean canWrite()`                              | 测试应用程序是否可以修改此抽象路径名表示的文件。             |\n|                  |                                           |          `boolean createNewFile()`                         | 当且仅当具有此名称的文件尚不存在时，创建一个新的空文件。     |\n|                  |                                           |          `boolean mkdir()`                                 | 创建由此抽象路径名命名的目录。                               |\n|                  |                                           |          `boolean mkdirs()`                                | 创建由此抽象路径名命名的目录，包括任何必需但不存在的父目录。 |\n|                  |                                           |          `boolean delete()`                                | 删除由此抽象路径名表示的文件或目录。                         |\n\n\n基础代码遍历某个文件夹下的子目录:\n\n```java\npublic class FileDemo2 {\n  \n   public static void list(File file) {\n   \n     if (file.isDirectory()) {\n       System.out.println(file.getPath());\n       // 如果是文件夹，则继续列出\n       File[] fs = file.listFiles();\n       if (fs != null) {\n         for (File f : fs) {\n           list(f);\n      }\n     }\n    }\n     System.out.println(file);\n }\n   public static void main(String[] args) {\n      // 需求：给定一个目录(test),遍历其下的所有目录(包含子目录)和文件\n       File file = new File(\"h:\\\\test\");\n       list(file);\n }\n}\n```\n\n## 字符编码\n1. ASCII编码表\n2. 汉字太多，128个数字不能包含所有的中文汉字，那么此时就 规定使用两个字节一起来表示一个汉字。\n3. Unicode是国际统一编码。\n\n作用:让全世界的人看到信息是统一的,不会出现乱码\n\n### 字符集\n常见的字符集:\n\n1. ASCII：每个字符占一个字节，只能包含128个符号。不能表示汉字。\n2. ISO-8859-1：也称之为latin-1，占一个字节，只收录西欧语言，不能表示汉字。\n3. GB2312/GBK/GB18030：占两个字节，支持中文。\n4. ANSI：占两个字节，在Win7简体中文的操作系统中ANSI 就指的是 GBK。\n5. UTF-8：是一种针对Unicode的可变长度字符编码，是Unicode的实现方式之一，支持中文。在开 发中建议使用。\n\n编码和解码的字符集相同，才能正确解码出信息。\n\n## IO\n程序内存需要从磁盘读取数据,内存中的数据无法长久保存\n\"IO\" 代表输入输出（Input/Output）\n\n### 流(stream)\n\n是指一连串流动的数据单元(字符、字节等),是以先进先出方式发送信息的通道。\n流\"（Stream）是一种处理数据的抽象概念。\n\nIO流是Java中处理输入和输出数据的方式，它将数据视为一系列连续的字节或字符。IO流以流的方式传输数据，这意味着数据可以逐个字节（或字符）地连续读取或写入，而不必将整个数据加载到内存中。\n\n### 字节流\n\n**用途**：字节流主要用于处理非文本数据，如图像、音频、视频等二进制文件。\n\n**类别**：字节流分为输入流（InputStream）和输出流（OutputStream）两大类。\n\n**基本类**：\nFileInputStream：用于从文件中读取字节数据。\n\n```java\ntry (FileInputStream inputStream = new FileInputStream(\"input.txt\")) {\n    int byteRead;\n    while ((byteRead = inputStream.read()) != -1) {\n        System.out.print((char) byteRead); // 将字节转换为字符并输出\n    }\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n```\nFileOutputStream：用于将字节数据写入文件。\n\n```java\nString content = \"Hello, this is some content to write to the file.\";\ntry (FileOutputStream outputStream = new FileOutputStream(\"output.txt\")) {\n    byte[] bytes = content.getBytes(); // 将字符串转换为字节数组\n    outputStream.write(bytes);\n} catch (IOException e) {\n    e.printStackTrace();\n}\n\n```",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 12,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-14T04:22:37.000+00:00",
        "updateTime": "2023-08-16T12:07:02.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1690345882362421249",
        "title": "java学习之多线程",
        "description": null,
        "content": "# 多线程\n\n为什么:提高了CPU的使用率\n\n随机性原理：因为多个线程不断去抢CPU的资源，CPU就在这多个线程间进行快速的切换，造成了随机性。\n\n### 并发? 并行?\n\n**并发**是指系统能够同时处理多个任务或操作，任务可以在同一时间段内交替执行，以提高效率。(单核)\n\n**并行**是系统真正同时执行多个任务，需要多个独立的执行单元。(多核)\n\n\n### 多线程执行流程\n**1. 创建线程：使用Thread类或Runnable接口创建线程对象。**\n \n**2. 线程执行：调用线程的start()方法来启动线程，使其开始执行任务。**\n\n**3. 竞争条件：多个线程访问共享资源可能导致竞争条件，造成数据不一致。**\n\n**4. 同步机制：使用同步锁（如synchronized关键字）来保护共享资源，避免竞争条件。**\n\n**5. 线程间通信：使用等待-通知机制或其他通信方式，在线程之间传递信息。**\n\n**6. 线程结束：线程执行完任务或不再需要时，线程结束运行。**\n\n参考图:\n\n\n![image.png](https://pic.code-nav.cn/post_picture/1673111457186713601/WLQaXEPN-image.png)\n\n\n### 实现的方式\n\n#### 继承Thread类：创建自定义线程类，继承Thread类，重写run()方法。\n\n```java\n//继承Thread\npublic class JavaThread extends Thread {\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            System.out.println(\"学java\");\n        }\n    }\n}\n```\n\n\n\n#### 实现Runnable接口：创建实现Runnable接口的类，将其传递给Thread对象。\n\n```java\n    public class Ticket implements Runnable{\n    private int count;\n    @Override\n    public void run() {\n        for (int i = 0; i < 100; i++) {\n            System.out.println(\"学java\");\n        }\n    }\n}\n\n```\n\n\n\n#### jion 和sleep\n##### jion 插入:强行插队\n`xxx.join()`\n\n##### sleep 睡眠:计时等待\n\n`xxx.sleep(毫秒)`\n\n\n###### 线程的优先级（了解）\n每个线程都有优先级，优先级的高低只和线程获得执行机会的次数多少有关。\n\n线程调度：\n\n\tA:分时调度\n\tB:抢占式调度;java采用第二种方案。\n        \n获取和设置线程的优先级。\n\n            默认优先级是5\n\t\t优先级范围是1-10\n\nThread对象的setPriority(int x)和getPriority()用来设置和获得优先级。\n\n###### 后台线程（了解）\n所谓后台线程，一般用于为其他线程提供服务。也称为守护线程。JVM的垃圾回收就是典型的后台线\n程。\n\njava程序默认两个线程.\n\n特点：若所有的前台线程都死亡，后台线程自动死亡。\nThread对象setDaemon(true)用来设置后台线程。\n\nsetDaemon(true)必须在start()调用前，否则抛IllegalThreadStateException异常。\n\n### 同步锁的使用方式\n\n为什么使用:不安全.\n\n线程安全问题是如何产生的呢?\n\n\t\tA:多线程环境\n\t\tB:有共享数据\n\t\tC:多条语句操作共享数据\n\n理解**同步锁对象**:\n\n\n\t非静态\t对象是this\n\t静态\t对象是当前类的字节码文件对象\n\n#### 同步代码块\n\n```java\nsynchronized(对象) {\n\t需要被同步的代码\n}\n```\n\n#### 同步方法\n\n```java\n    修饰符 synchronized 返回值 方法名(){}\n```\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 12,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-12T12:53:58.000+00:00",
        "updateTime": "2023-08-20T11:41:36.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1689602470763929602",
        "title": "java学习之认识异常",
        "description": null,
        "content": "## 异常处理概述\n\n1. **异常（理解）**\n   - (1) 程序出现的不正常的情况。\n   - (2) 异常分类\n     - `Throwable`\n       - `Error`: 严重的问题(修改代码逻辑)\n       - `Exception`\n         - `RuntimeException`: 可以处理，也可以不处理。一般就是程序出问题了，需要改程序。\n         - 非`RuntimeException`: 需要进行处理，否则编译不通过。\n   - (3) JVM的默认处理方案\n     - 把异常的类名、原因和位置等信息输出在了控制台。\n     - 会在哪里跌倒哪里坐下来。程序停止。\n   - (4) 自己处理异常的方案\n     - A: `try...catch...finally`\n       - 变形:\n         - `try...catch...`\n         - `try...catch...catch...catch...`\n         - `try...catch...finally`\n         - `try...catch...catch...catch...finally`\n         - `try...finally`\n     - B: `throws`\n       - 把问题抛出\n     - 建议使用A处理方案。实在解决不了，使用B方案。\n   - (5) 编译时期异常和运行时期异常的区别\n     - A: 编译时期异常：必须处理，否则程序不能通过编译。\n     - B: 运行时期异常：可以处理，也可以不处理。一般不处理。\n   - (6) `throws`和`throw`的区别\n     - A: `throws`\n       - 方法声明上，后面跟的是类名，用逗号隔开，表示可能有异常。\n     - B: `throw`\n       - 方法体中，后面跟的是对象名，只能跟一个，表示有一个异常产生。\n   - (7) `finally`的面试题\n     - A: 特点及注意事项\n       - a: 被`finally`控制的代码永远会执行。\n       - b: 注意：在执行`finally`之前JVM退出了，就不会执行了。\n     - B: `final`、`finally`和`finalize`的区别\n   - C: 如果`catch`里面有`return`，`finally`还执行吗？如果执行，在`return`前还是后。\n\n### Throwable、Error、Exception 的区别\n\n在 Java 中，`Throwable`、`Error` 和 `Exception` 是三个重要的类，用于处理程序中的异常情况。它们之间的区别如下：\n\n1. **Throwable**：\n   - `Throwable` 是 Java 中所有异常的根类，它是一个顶层的异常类，其他异常类都直接或间接地继承自它。\n   - `Throwable` 有两个主要的子类：`Error` 和 `Exception`。\n\n2. **Error**：\n   - `Error` 表示严重的错误，通常是由于虚拟机运行环境出现了无法恢复的问题。\n   - 例子包括：`OutOfMemoryError`（内存不足）、`StackOverflowError`（栈溢出）等。\n   - 一般情况下，应用程序无法处理 `Error`，因为这些错误通常是系统级别的问题，程序无法从中恢复。因此，开发人员一般不会捕获或处理 `Error`。\n\n3. **Exception**：\n   - `Exception` 表示一般性的异常情况，可以被程序处理。\n   - `Exception` 又分为两类：`RuntimeException` 和非 `RuntimeException`。\n   - `RuntimeException`：这是一类特殊的异常，通常是由程序逻辑错误引起的，例如空指针异常（`NullPointerException`）、数组越界异常（`IndexOutOfBoundsException`）等。这些异常是可以通过编写更好的代码来避免的，因此 Java 不要求必须显式地捕获或处理它们。\n   - 非 `RuntimeException`：这些异常通常是由外部因素引起的，例如文件找不到异常（`FileNotFoundException`）、网络连接异常（`IOException`）等。这些异常是需要在代码中显式处理的，否则编译会出错。\n\n总之，`Throwable` 是异常体系的根类，`Error` 表示严重错误，通常无法处理，而 `Exception` 表示一般性的异常情况，分为可以不处理的 `RuntimeException` 和需要处理的非 `RuntimeException`。在实际编程中，应该根据具体情况选择捕获和处理异常。\n\n\n#### 说说throw和throws的区别(面试题)\n\n```java\nthrows:\n(1)声明抛出异常，方法本身不处理异常，而是提醒调用者处理。\n(2)定义方法时，用在方法的定义形式上\n(3)throws 用于提醒方法调用者，方法可能出现异常，也可能不出现异常。\n\nthrow: \n(1)手动抛出异常，程序员根据程序的逻辑手动抛出一个具体的异常对象。throw 异常对象;\n(2)用在方法内\n(3)如果遇到throw 方法内部一定产生异常。\n    \n```\n   \n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 10,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-10T11:39:54.000+00:00",
        "updateTime": "2023-08-20T11:44:09.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章",
          "笔记",
          "Java"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1689274831431901186",
        "title": "java学习之集合-day02",
        "description": null,
        "content": "# Java集合框架中的Set接口和实现类\n\n## Set接口概述和特点\n\nSet接口是Java集合框架中的一部分，它继承自Collection接口。Set接口的特点包括：\n\n- **不允许重复元素：** Set中不能包含重复的元素，每个元素在Set中只能出现一次。\n- **无序性：** Set不保证元素的顺序，不同的实现类可能以不同的方式存储和遍历元素。\n- **允许null元素：** 大多数Set实现允许添加一个null元素，但某些实现可能不支持。\n\n## Set接口实现类\n\nJava中常见的Set接口的实现类有：\n- **HashSet:** 基于哈希表实现，提供快速的插入、删除和查找操作。元素无序存储。\n- **TreeSet:** 基于红黑树实现，元素按照自然顺序或指定的Comparator进行排序。\n\n## HashSet类\n\n### 基本使用\n\n```java\nimport java.util.HashSet;\n\npublic class HashSetExample {\n    public static void main(String[] args) {\n        HashSet<String> set = new HashSet<>();\n        \n        set.add(\"apple\");\n        set.add(\"banana\");\n        set.add(\"orange\");\n        \n        System.out.println(set); // 无序输出：[orange, banana, apple]\n        \n        set.remove(\"banana\");\n        System.out.println(set); // [orange, apple]\n        \n        System.out.println(\"Contains 'apple': \" + set.contains(\"apple\")); // true\n        System.out.println(\"Size: \" + set.size()); // 2\n    }\n}\n```\n## 哈希表工作原理\n\nHashSet基于哈希表实现，它使用了哈希函数将元素映射到数组的索引位置。具体工作原理涉及哈希码、散列冲突解决（如链地址法）等概念。\n\n### HashSet存储自定义对象\n\n为了在HashSet中存储自定义对象，您需要确保自定义类正确实现了`equals()`和`hashCode()`方法，以便保证元素的唯一性和正确的哈希计算。\n\n## TreeSet类\n\n### 基本使用\n\n```java\nimport java.util.TreeSet;\n\npublic class TreeSetExample {\n    public static void main(String[] args) {\n        TreeSet<Integer> set = new TreeSet<>();\n        \n        set.add(5);\n        set.add(2);\n        set.add(8);\n        \n        System.out.println(set); // 有序输出：[2, 5, 8]\n        \n        set.remove(5);\n        System.out.println(set); // [2, 8]\n        \n        System.out.println(\"First element: \" + set.first()); // 2\n        System.out.println(\"Last element: \" + set.last()); // 8\n    }\n}\n```\n\n## TreeSet工作原理\n\nTreeSet基于红黑树实现，红黑树是一种自平衡二叉搜索树。它保持元素有序，插入、删除和查找操作的平均时间复杂度都是O(log n)。\n\n### Comparable接口和Comparator接口\n\n要在TreeSet中存储自定义对象，需要确保元素类实现了Comparable接口或提供一个Comparator对象用于元素的比较。\n\n```java\nimport java.util.TreeSet;\nimport java.util.Comparator;\n\nclass Person implements Comparable<Person> {\n    String name;\n    int age;\n    \n    // Constructors, getters, setters\n    \n    @Override\n    public int compareTo(Person other) {\n        return this.name.compareTo(other.name);\n    }\n}\n\npublic class TreeSetExample {\n    public static void main(String[] args) {\n        TreeSet<Person> set = new TreeSet<>(Comparator.comparingInt(p -> p.age));\n        \n        set.add(new Person(\"Alice\", 25));\n        set.add(new Person(\"Bob\", 30));\n        set.add(new Person(\"Charlie\", 22));\n        \n        System.out.println(set); // 按照年龄排序输出\n    }\n}\n```\n\n## Comparable接口和Comparator接口的作用和区别?\n\n### Comparable接口\n- `Comparable`接口是Java提供的一个用于自然排序的接口。\n- 当一个类实现了`Comparable`接口，它必须实现`compareTo`方法，该方法用于定义对象之间的自然顺序关系。\n- 实现了`Comparable`接口的对象可以通过`Collections.sort`方法或`Arrays.sort`方法进行排序。\n\n### Comparator接口\n- `Comparator`接口是用于比较两个对象的接口，不需要修改源代码，可以灵活地定义多种不同的比较规则。\n- 实现了`Comparator`接口的类需要实现`compare`方法，该方法用于定义对象之间的比较规则。\n- `Comparator`对象可以作为参数传递给各种排序方法，如`Collections.sort`和`Arrays.sort`。\n\n#### 区别\n- `Comparable`接口在类的定义时指定排序逻辑，适用于对类的自身属性进行排序。\n- `Comparator`接口则是在需要排序的时候提供一个比较器，适用于在不修改类定义的情况下定义多种不同的排序方式。\n\n## Map集合的使用场景\n\n`Map`是Java集合框架中的一种数据结构，用于存储键值对。以下是`Map`集合的一些使用场景：\n\n1. **存储关联数据：** 适用于需要存储一对一关系的数据，如字典、映射关系等。\n2. **数据缓存：** 可以使用`Map`集合来缓存计算结果或数据，以提高性能。\n3. **查找表：** 适用于构建查找表，通过键快速查找对应的值。\n4. **计数器：** 可以用`Map`集合实现计数器功能，统计元素出现的次数。\n\n## Map集合中元素的增删改查\n\n### 增加元素\n\n```java\nMap<String, Integer> map = new HashMap<>();\nmap.put(\"apple\", 3);\nmap.put(\"banana\", 5);\n//删除元素\nmap.remove(\"apple\");\n//修改元素\nmap.put(\"banana\", 10); // 更新键\"banana\"对应的值\n//查找\nint count = map.getOrDefault(\"apple\", 0);\n// 获取键\"apple\"对应的值，如果不存在返回默认值0\n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 12,
        "thumbNum": 0,
        "favourNum": 0,
        "commentNum": 1,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-09T13:57:59.000+00:00",
        "updateTime": "2023-08-19T13:21:25.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章",
          "Java"
        ],
        "fileList": null,
        "videoList": null,
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1688143523863396354",
        "title": "java学习之常用类-数组操作",
        "description": null,
        "content": "## 数组元素拷贝的逻辑?\n\n通过循环遍历原数组的每个元素，并将其逐个复制到目标数组中。\n\n## 数组元素冒泡排序的原理?\n- 比较相邻的两个元素。如果第一个元素比第二个元素大（或者按照升序排序的要求，如果第一个元素比第二个元素小），则交换这两个元素的位置。\n\n- 对数组中的每一对相邻元素执行步骤1。这样一轮遍历结束后，最后的元素将是数组中的最大元素（或最小元素，取决于排序顺序）。\n\n- 重复步骤1和步骤2，每次遍历减少一个元素，直到没有任何需要交换的元素，即数组已经按照指定顺序排列。\n\n**总结:** 每次遍历都把最大（或最小）的元素冒泡到未排序的最后，不断重复这个过程直到整个数组有序。\n\n## 数组元素的二分法查找的原理?\n**前提:** 查找的数组里的元素必须为有序元素\n\n1. 确定查找范围：首先，需要确定要查找的元素所在的范围。初始时，整个数组就是查找范围，即最小索引为0，最大索引为数组长度减1。\n\n2. 计算中间索引：找到查找范围的中间位置，计算中间索引。可以通过以下公式计算：mid = (low + high) / 2，其中low为查找范围的最小索引，high为查找范围的最大索引。\n\n3. 比较目标值：将目标值与中间位置的元素进行比较。如果目标值等于中间位置的元素，则查找成功，返回中间索引。如果目标值小于中间位置的元素，则在左侧的子数组中继续查找。如果目标值大于中间位置的元素，则在右侧的子数组中继续查找。\n\n4. 更新查找范围：根据比较结果，更新查找范围。如果目标值小于中间位置的元素，说明目标值可能在左侧的子数组中，此时将high更新为mid - 1；如果目标值大于中间位置的元素，说明目标值可能在右侧的子数组中，此时将low更新为mid + 1。然后回到步骤2，继续查找。\n\n5. 重复查找直至找到目标值或确定不存在：重复步骤2、步骤3和步骤4，直至找到目标值，此时返回目标值索引，或者确定目标值不存在于数组中，返回一个特定的标识（通常是负数）表示未找到。\n\n## 如何使用Arrays中的方法完成对数组的操作?\n\n**前提:** 要明确需求,即我们需要怎么操作数组?\n\n1. 使用官方文档(API)或第三方译本,去找到我们需要的功能方法.\n2. 通过IDEA阅读Arrays工具类源码,通过对应功能的单词查找(记住常用单词).\n3. 通过搜索软件或ChatGPT等工具,通过需求查找相应的功能用法.\n\n\n#### Arrays工具类常用方法:\n\n| 类型       | 构造器            | 方法                                                         | 描述                                                         |\n| ---------- | ----------------- | ------------------------------------------------------------ | ------------------------------------------------------------ |\n|   Arrays  | Arrays()          | -                                                            | Arrays类没有公共构造器，因为Arrays类是一个工具类，不应该被实例化。 |\n|        |                  | `void sort(int[] array)`                                     | 对整型数组进行升序排序。                                      |\n|       |                  | `void sort(int[] array, int fromIndex, int toIndex)`         | 对数组的指定范围进行升序排序，包括fromIndex，但不包括toIndex。 |\n|        |                  | `int binarySearch(int[] array, int key)`                    | 使用二分法在已排序的整型数组中查找指定元素的索引。如果找到，返回元素的索引；如果未找到，返回负数。 |\n|       |                  | `int binarySearch(int[] array, int fromIndex, int toIndex, int key)` | 在指定范围内使用二分法查找指定元素的索引。                    |\n|      |                  | `int[] copyOf(int[] original, int newLength)`               | 复制原数组的前newLength个元素到一个新数组中。如果newLength大于原数组长度，将用0填充多出的部分。 |\n|      |                  | `int[] copyOfRange(int[] original, int from, int to)`       | 复制原数组的指定范围内的元素到一个新数组中。包括from索引处的元素，但不包括to索引处的元素。 |\n|       |                  | `void fill(int[] array, int value)`                          | 将整型数组中的所有元素设置为指定的值。                       |\n|        |                  | `void fill(int[] array, int fromIndex, int toIndex, int value)` | 将整型数组中指定范围内的元素设置为指定的值。    |\n\n\n\n### 数组的增删改查功能的思路\n\n容器创建:\n\n    private Object[]  players;//Object类型的数组，可以存储任何类型的对象。\n    private int size; //记录真实元素的个数:跟踪ArrayList中有效元素的个数，\n    //因为在数组中可能存在无效数据（null元素），\n    //所以使用size来标记实际有效元素的位置。\n\n    public ArrayList(int capacity) {\n        if(capacity <0){\n\n        }\n        this.players = new Object[capacity];//通过传进来的容量,创建Object对象\n    }\n\n    public ArrayList() {\n        this(10);//默认的容量\n    }\n\n\n添加\n\n    public void add(Object ele){\n        //增加的元素;size记录了数组中真实元素的个数，添加了一个元素后，size需要增加。\n        players[size++] =ele;\n        //扩容\n    // 1-> 判断扩容时机;players.length表示当前数组的容量（数组的长度）\n    // 2-> 将原数组复制到更大容量的数组中,重新赋值给原数组\n    if (size == players.length) {\n        players=Arrays.copyOf(players,players.length*2+2);\n        }\n     }\n\n删除\n\n    public void delete(int index){\n        //通过索引去查找需要删除的元素\n        //判断该索引是否在有效数据范围内\n        if (index <0 ||index>=size){\n            System.out.println(\"索引越界\");\n            return;\n        }\n        //size减一的原因:如果原数组没有发生过扩容,则可能会索引越界\n        for (int i = index; i <size-1 ; i++) {\n            players[i]=players[i+1];//如果没发生过扩容,就越界.\n        }\n        players[size]=null;//把删除的位置赋值为null;\n        size--;//删除后将有效数据减少\n        \n    }\n修改\n\n     public  void update(int index,Object num){\n        if (index <0 ||index>=size){\n            System.out.println(\"索引越界\");\n            return;\n        }\n        //根据传入的索引和修改值赋值给数组该索引位置\n        players[index] =num;\n    }\n\n查询\n\n    public Object getIndex(int index){\n    //先判断索引是否越界\n        if (index <0 ||index>=size){\n            System.out.println(\"索引越界\");\n            return null;\n        }\n        //读取该索引数组元素的内容并返回\n        return players[index];\n    }\n\n打印\n\n    //重写toString 打印有效数据(真实元素)\n        public String toString() {\n        if(size == 0){\n            return \"[]\";\n        }\n        StringBuilder stringBuilder = new StringBuilder();\n        stringBuilder.append(\"[\");\n        for (int i = 0; i < size; i++) {//通过真实元素的个数确定拼接的元素\n            stringBuilder.append(players[i]).append(\",\");\n        }\n        stringBuilder.deleteCharAt(stringBuilder.length()-1);//删除最后拼接的\",\"\n        stringBuilder.append(\"]\");\n        return stringBuilder.toString();\n    }\n\n\n \n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 17,
        "thumbNum": 3,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-06T11:02:34.000+00:00",
        "updateTime": "2023-08-20T01:39:15.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章",
          "Java",
          "后端",
          "笔记"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      },
      {
        "id": "1686690187289038850",
        "title": "java学习面向对象-类与对象-day04",
        "description": null,
        "content": "## this的作用是什么？都有哪些用途？\n\n#### this 是一个关键字，在Java中用于指代当前对象实例。它有以下主要作用和用途：\n\n- 引用当前对象：this 关键字用于在类的实例方法中引用当前对象。在方法内部，您可以使用 this 来访问当前对象的成员变量和方法。\n- 调用当前对象的方法：this 关键字可以用于在实例方法中调用当前对象的其他方法。这样可以避免与方法参数或局部变量名称产生混淆。\n- 构造函数重载：在构造函数中，如果需要调用该类的其他构造函数来初始化对象，可以使用 this 关键字。\n- 区分成员变量和局部变量：在方法中，如果成员变量和方法参数（或局部变量）具有相同的名称，可以使用 this 来区分。\n- 在内部类中访问外部类：当在一个内部类中存在与外部类同名的成员变量或方法时，使用 this 关键字可以访问外部类的成员。\n\n**总结:this 关键字在 Java 中主要用于引用当前对象实例，解决命名冲突问题，构造函数重载，以及在内部类中访问外部类的成员。使用 this 关键字可以提高代码的可读性，避免歧义，并使得代码更加清晰和易于理解。**\n\n## super的作用是什么？都有哪些用途？\n\nsuper 是一个关键字，在Java中用于引用父类的成员（包括构造函数和方法）\n\n- 访问父类的成员：在子类中，可以使用 super 关键字来引用父类的成员变量和方法。这允许子类访问父类的实现，并在此基础上进行扩展或重写。\n- 调用父类的构造函数：在子类的构造函数中，可以使用 super 关键字来调用父类的构造函数，以便在子类对象初始化时先执行父类的构造函数。\n- 在内部类中访问外部类的同名成员：当在内部类中存在与外部类同名的成员变量或方法时，使用 super 关键字可以访问外部类的成员。\n\n\n**总结:super 关键字在 Java 中主要用于访问父类的成员，调用父类的构造函数，以及在内部类中访问外部类的同名成员。使用 super 关键字可以使代码更加灵活和可扩展，同时充分利用继承和多态的特性。**\n\n## static的作用和使用场景\n### static 是一个关键字，在Java中有多种用途，它主要用于定义类级别的成员，而不是实例级别的成员。\n\n- 静态成员变量：使用 static 关键字定义的成员变量称为静态变量或类变量。静态变量属于类本身，而不是类的实例，因此它在所有实例之间共享。\n\n- 静态方法：使用 static 关键字定义的方法称为静态方法或类方法。静态方法不依赖于类的实例，可以直接通过类名调用，无需创建对象。\n\n- 静态块：使用 static 关键字定义的静态块用于在类加载时执行一些初始化操作。静态块在类的静态成员初始化之前执行。\n\n- 单例模式：静态方法可以用于实现单例模式，确保类只有一个实例存在。\n\n\n- *工具类：静态方法通常用于创建工具类，其中的方法不依赖于实例状态，而只是根据传入的参数进行处理。*\n\n**小结:static 关键字用于定义类级别的成员，不依赖于类的实例。静态成员在整个类的生命周期中只有一份副本，并且可以通过类名直接访问。常见的使用场景包括静态成员变量、静态方法、静态块、实现单例模式和创建工具类。请注意，过度使用静态成员可能会导致代码难以维护，应该谨慎使用。**\n\n\n## final 是一个修饰符（关键字），在Java中用于表示“最终”的含义。当使用 final 修饰某个成员（变量、方法或类）时，表示该成员的值、实现或继承关系不可改变。\n\n\n- 对变量的作用：\n        - final 修饰的变量为常量（常量也称为不可变的变量）。一旦在声明时或构造函数中赋值后，该变量的值不能再改变。\n        - final 变量必须在声明时或构造函数中进行初始化，之后不能再进行赋值。\n\n\n- 对方法的作用：\n    - final 修饰的方法为最终方法，表示该方法不可被子类重写（覆盖）。\n    - 子类无法修改 final 方法的实现，保证了方法的稳定性和一致性。\n    \n-     对类的作用：\n        - final 修饰的类为最终类，表示该类不可被继承，即不能有子类。\n        - 常见用法是将某些类设计成工具类或单例模式，防止其他类对其进行继承。\n\n- 对实例变量的作用：\n    - final 修饰的实例变量表示它的值在对象初始化后不能再被修改。这对于确保在对象生命周期内实例变量不会被改变非常有用。\n\n**小结:final 修饰符的作用是确保某个成员的不可变性、不可修改性或不可扩展性，它有助于提高代码的可靠性和安全性。在适当的情况下使用 final 可以让代码更易于维护和理解，并防止意外的改变或扩展。**\n\n\n## 静态代码块的语法和执行的时机\n##### 静态代码块是 Java 中用 static 修饰的一种特殊代码块。它用于在类加载时执行一些初始化操作。\n\n静态代码块可以在类中的任何位置定义，它们会按照在类中的顺序执行。当 JVM 加载类时，首先会执行所有静态代码块，然后再执行其他成员的初始化操作。\n\n        静态代码块的执行时机：\n         在类加载时执行：静态代码块在类加载时执行，且仅执行一次。类的加载过程是在第一次访问该类时发生的，包括创建对象、访问静态成员等。\n        顺序执行：如果一个类中定义了多个静态代码块，它们会按照在类中的顺序依次执行。\n        \n**总结：静态代码块是在类加载时执行的，仅执行一次。它可以用于执行一些类级别的初始化操作，例如初始化静态成员变量或加载静态资源。由于静态代码块在类加载时自动执行，因此适用于类级别的初始化场景.**    \n\n## 匿名内部类的作用和语法\n\n匿名内部类是一种特殊的内部类，它没有显式的类名，直接在创建对象时定义并实例化。匿名内部类通常用于实现接口或继承抽象类的情况，且只使用一次，避免为每个实现创建新的类。\n\n        实现接口或继承抽象类：匿名内部类可以用于在创建对象时实现接口或继承抽象类，并在同一处定义接口的实现或抽象类的扩展。\n\n        简化代码结构：对于一些简单的逻辑，使用匿名内部类可以避免为每个实现创建新的类，使代码更简洁。\n        \n        \n        语法：\n        匿名内部类的语法如下:\n        \n```java\n        Interface myInterface = new Interface() {\n    // 匿名内部类的实现代码\n    // 实现接口中的方法\n    };\n\n```\n\n\n    继承抽象类\n    \n```java\n\n    AbstractClass myAbstractClass = new AbstractClass() {\n    // 匿名内部类的实现代码\n    // 实现抽象类中的抽象方法\n};\n\n```\n\n**注意事项：**\n\n    匿名内部类没有显式的类名，因此无法被其他地方引用或重用。它只能在创建对象时使用，并且只能使用一次。\n    \n    匿名内部类可以访问外部类的成员和方法，也可以访问 final 或事实上为 final 的局部变量（Java 8+ 中）。\n    \n    在匿名内部类中，不能定义静态成员、静态方法或构造函数。\n    \n    当使用匿名内部类时，通常会在创建对象的同时重写抽象方法或接口方法，使代码更简洁，更集中，但也会增加代码的阅读难度，需要根据实际情况进行取舍。\n\n\n## 枚举类的作用和语法\n\n##### 枚举类（Enum Class）是一种特殊的类，用于定义一组固定的常量。枚举类的作用是将常量值集中在一个类中，提供更加简洁和可读性强的代码，避免使用普通类或整数常量来表示固定的常量值。\n\n\n**语法**\n\n\n```java\n\n        enum EnumName {\n    CONSTANT1,\n    CONSTANT2,\n    // ... 其他常量\n}\n\n```\n**枚举类的优势：**\n\n    类型安全：枚举类提供了类型安全的枚举常量，不需要担心传入无效的常量值。\n    \n    可读性强：枚举常量具有自解释性，代码更加可读和易于维护。\n    \n    唯一性：每个枚举常量在枚举类中都是唯一的，保证了常量值的唯一性。\n    \n**枚举类在实际开发中常用于表示状态、选项、日期、星期几等具有固定值的场景。使用枚举类可以增加代码的可读性，提高代码的可维护性，并避免传入无效或非预期的常量值。**\n    \n    \n\n\n",
        "category": "文章",
        "cover": null,
        "language": null,
        "viewNum": 10,
        "thumbNum": 1,
        "favourNum": 0,
        "commentNum": 0,
        "priority": 0,
        "userId": "1673111457186713601",
        "reviewStatus": 1,
        "reviewMessage": null,
        "reviewerId": null,
        "reviewTime": null,
        "createTime": "2023-08-02T10:47:32.000+00:00",
        "updateTime": "2023-08-20T03:17:05.000+00:00",
        "user": {
          "id": "1673111457186713601",
          "planetCode": "24251",
          "userName": "小白学it",
          "userAvatar": "https://pic.code-nav.cn/user_avatar/1673111457186713601/deuZEvYh-v2-44a47c4b5f6b6f8cec8ee51e645736ac_720w.webp",
          "gender": null,
          "userProfile": null,
          "userRole": "vip",
          "interests": [],
          "place": "cq",
          "birthday": "2002-05-14",
          "school": null,
          "major": null,
          "education": null,
          "graduationYear": null,
          "jobStatus": "在校",
          "company": null,
          "job": null,
          "workYear": null,
          "direction": "后端",
          "goal": "社招",
          "github": null,
          "blog": null,
          "score": 0,
          "coin": 0,
          "followeeNum": 4,
          "followNum": 2,
          "followStatus": null,
          "vipExpireTime": "2024-06-25T23:22:50.000+00:00",
          "lastLoginTime": null,
          "createTime": "2023-06-25T23:30:30.000+00:00",
          "updateTime": "2023-08-20T05:43:25.000+00:00"
        },
        "tags": [
          "文章"
        ],
        "fileList": null,
        "videoList": [],
        "atUserList": null,
        "pictureList": null,
        "hasThumb": false,
        "hasFavour": false,
        "needVip": null,
        "atUserVOList": null
      }
    ],
    "total": "141",
    "size": "10",
    "current": "1",
    "orders": [],
    "optimizeCountSql": true,
    "searchCount": true,
    "countId": null,
    "maxLimit": null,
    "pages": "15"
  },
  "message": "ok"
}